
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001dc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005bd  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000194  00000000  00000000  00000fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000385  00000000  00000000  00001179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000177  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000126  00000000  00000000  0000173f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  8a:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
}

//This interrupt takes an input from a button and increases the duty
//cycle.
//Params: in
ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	if(OCR1A <= (ICR1 - 1))
  a4:	2a b5       	in	r18, 0x2a	; 42
  a6:	3b b5       	in	r19, 0x2b	; 43
  a8:	86 b5       	in	r24, 0x26	; 38
  aa:	97 b5       	in	r25, 0x27	; 39
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	82 17       	cp	r24, r18
  b0:	93 07       	cpc	r25, r19
  b2:	28 f0       	brcs	.+10     	; 0xbe <__vector_1+0x2c>

		OCR1A += 0x01;
  b4:	8a b5       	in	r24, 0x2a	; 42
  b6:	9b b5       	in	r25, 0x2b	; 43
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	9b bd       	out	0x2b, r25	; 43
  bc:	8a bd       	out	0x2a, r24	; 42

}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	3f 91       	pop	r19
  c4:	2f 91       	pop	r18
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_2>:

//This interrupt takes an input from a button and decreases the duty
//cycle.
//Params: in
ISR(INT1_vect){  
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	if(OCR1A > 0x01)
  de:	8a b5       	in	r24, 0x2a	; 42
  e0:	9b b5       	in	r25, 0x2b	; 43
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	91 05       	cpc	r25, r1
  e6:	28 f0       	brcs	.+10     	; 0xf2 <__vector_2+0x22>

		OCR1A -= 0x01;
  e8:	8a b5       	in	r24, 0x2a	; 42
  ea:	9b b5       	in	r25, 0x2b	; 43
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	9b bd       	out	0x2b, r25	; 43
  f0:	8a bd       	out	0x2a, r24	; 42

}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_16>:

ISR(ADC_vect) //ADC interrupt vector function
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
	uint8_t theLowADC = ADCL;  //assign the variable theLowADC as the value in the register ADCL
 10c:	84 b1       	in	r24, 0x04	; 4
	uint16_t theTenBitResults = ADCH<<8;  //assign the variable theTenBitResults as the value in ADCH shifted 8 left.
 10e:	85 b1       	in	r24, 0x05	; 5
	//Display the value on the Display
	ADCSRA |=1<<ADSC;  //start ADC conversion
 110:	36 9a       	sbi	0x06, 6	; 6
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <_Z10LCDCommandh>:
	LCDCommand(0b00000100);
}

void LCDCommand(unsigned char command)
{
	PORTB = command;
 11e:	88 bb       	out	0x18, r24	; 24
	PORTD |= 1<<PIND7;
 120:	97 9a       	sbi	0x12, 7	; 18
	PORTD &= ~0b00000011;
 122:	82 b3       	in	r24, 0x12	; 18
 124:	8c 7f       	andi	r24, 0xFC	; 252
 126:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	8f ec       	ldi	r24, 0xCF	; 207
 12a:	97 e0       	ldi	r25, 0x07	; 7
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <_Z10LCDCommandh+0xe>
 130:	00 c0       	rjmp	.+0      	; 0x132 <_Z10LCDCommandh+0x14>
 132:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~1<<PIND7;
 134:	82 b3       	in	r24, 0x12	; 18
 136:	12 ba       	out	0x12, r1	; 18
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <_Z10LCDCommandh+0x1e>
 140:	00 c0       	rjmp	.+0      	; 0x142 <_Z10LCDCommandh+0x24>
 142:	00 00       	nop
	_delay_ms(1);
}
 144:	08 95       	ret

00000146 <_Z7LCDInitv>:
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	99 ef       	ldi	r25, 0xF9	; 249
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <_Z7LCDInitv+0x4>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_Z7LCDInitv+0xa>
 150:	00 00       	nop
}

void LCDInit()
{
	_delay_ms(32);
	LCDCommand(0b00111000);
 152:	88 e3       	ldi	r24, 0x38	; 56
 154:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z10LCDCommandh>
	LCDCommand(0b00001100);
 158:	8c e0       	ldi	r24, 0x0C	; 12
 15a:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z10LCDCommandh>
	LCDCommand(0b00000001);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z10LCDCommandh>
 164:	8f ec       	ldi	r24, 0xCF	; 207
 166:	97 e0       	ldi	r25, 0x07	; 7
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <_Z7LCDInitv+0x22>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_Z7LCDInitv+0x28>
 16e:	00 00       	nop
	_delay_ms(1);
	LCDCommand(0b00000100);
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z10LCDCommandh>
}
 176:	08 95       	ret

00000178 <main>:

int main(void)
{

	//Disable Interrupts
	cli();
 178:	f8 94       	cli
	DDRD = 0b10100011;
 17a:	83 ea       	ldi	r24, 0xA3	; 163
 17c:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	87 bb       	out	0x17, r24	; 23
	//Set counter options
	TCCR1A = 0b10100010;
 182:	82 ea       	ldi	r24, 0xA2	; 162
 184:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011001;
 186:	89 e1       	ldi	r24, 0x19	; 25
 188:	8e bd       	out	0x2e, r24	; 46
	//Set TOP = ICR1 for 24.5kHz
	ICR1 = 0x14D;
 18a:	8d e4       	ldi	r24, 0x4D	; 77
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	97 bd       	out	0x27, r25	; 39
 190:	86 bd       	out	0x26, r24	; 38
	//Arbitrarily Set OCR1A (Duty Cycle)
	OCR1A = 0x05;
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9b bd       	out	0x2b, r25	; 43
 198:	8a bd       	out	0x2a, r24	; 42
	//Enable INT0 and INT1
	GICR = 1<<INT0 | 1<<INT1;
 19a:	80 ec       	ldi	r24, 0xC0	; 192
 19c:	8b bf       	out	0x3b, r24	; 59
	//Set Falling Edge Trigger for Interrupts
	MCUCR = 1<<ISC01 | 1<<ISC00 | 1<<ISC11 | 1<<ISC10;
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	85 bf       	out	0x35, r24	; 53
	//set ADC prescaler to division of 16, so at a clk f of 8Mhz, ADC speed is 500kHz
	ADCSRA |= 1<<ADPS2; //see table 85 in datasheet for prescaler selection options
 1a2:	32 9a       	sbi	0x06, 2	; 6
	//set voltage reference as AVCC, should be 5volts?  see page 208
	//we should maybe change this to a more stable reference?
	ADMUX |= 1<<REFS0;
 1a4:	3e 9a       	sbi	0x07, 6	; 7
	//enable ADC interrupt
	ADCSRA |= 1<<ADIE;
 1a6:	33 9a       	sbi	0x06, 3	; 6
	//enable the ADC
	ADCSRA |= 1<<ADEN;
 1a8:	37 9a       	sbi	0x06, 7	; 6
	//Re-enable Interrupts
	sei();
 1aa:	78 94       	sei
	
	LCDInit();
 1ac:	0e 94 a3 00 	call	0x146	; 0x146 <_Z7LCDInitv>
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <main+0x38>

000001b2 <_Z7LCDDatah>:
	_delay_ms(1);
}

void LCDData(unsigned char data)
{
	PORTB = data;
 1b2:	88 bb       	out	0x18, r24	; 24
	PORTD |= (1<<PIND7 | 1<<PIND1);
 1b4:	82 b3       	in	r24, 0x12	; 18
 1b6:	82 68       	ori	r24, 0x82	; 130
 1b8:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~0x01;
 1ba:	90 98       	cbi	0x12, 0	; 18
 1bc:	8f ec       	ldi	r24, 0xCF	; 207
 1be:	97 e0       	ldi	r25, 0x07	; 7
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <_Z7LCDDatah+0xe>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <_Z7LCDDatah+0x14>
 1c6:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~0b10000000;
 1c8:	97 98       	cbi	0x12, 7	; 18
 1ca:	8f ec       	ldi	r24, 0xCF	; 207
 1cc:	97 e0       	ldi	r25, 0x07	; 7
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <_Z7LCDDatah+0x1c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <_Z7LCDDatah+0x22>
 1d4:	00 00       	nop
	_delay_ms(1);
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
