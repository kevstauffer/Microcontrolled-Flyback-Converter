
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000938  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000432  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014c  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000127  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  00001437  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{
	int cnt = 0;
	
	//Disable Interrupts
	cli();
  92:	f8 94       	cli
	//Set PIND5(PWM) to Output and PIN3:2(INT1:0) to Input
	DDRD = 0b00100000;
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	81 bb       	out	0x11, r24	; 17
	//Set PORTC for LCD Data Bus
	DDRC = 0x00;
  98:	14 ba       	out	0x14, r1	; 20
	//Set PORTA7:5 for LCD Control
	DDRB = 0b11100000;
  9a:	80 ee       	ldi	r24, 0xE0	; 224
  9c:	87 bb       	out	0x17, r24	; 23
	//Set counter options
	TCCR1A = 0b10100010;
  9e:	82 ea       	ldi	r24, 0xA2	; 162
  a0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011001;
  a2:	89 e1       	ldi	r24, 0x19	; 25
  a4:	8e bd       	out	0x2e, r24	; 46
	//Set TOP = ICR1 for 24.5kHz
	ICR1 = 0x14D;
  a6:	8d e4       	ldi	r24, 0x4D	; 77
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	97 bd       	out	0x27, r25	; 39
  ac:	86 bd       	out	0x26, r24	; 38
	//Arbitrarily Set OCR1A (Duty Cycle)
	OCR1A = 0x05;
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	9b bd       	out	0x2b, r25	; 43
  b4:	8a bd       	out	0x2a, r24	; 42
	//Enable INT0 and INT1
	GICR = 1<<INT0 | 1<<INT1;
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	8b bf       	out	0x3b, r24	; 59
	//Set Falling Edge Trigger for Interrupts
	MCUCR = 1<<ISC01 | 1<<ISC00 | 1<<ISC11 | 1<<ISC10;
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	85 bf       	out	0x35, r24	; 53
	//set ADC prescaler to division of 16, so at a clk f of 8Mhz, ADC speed is 500kHz
	ADCSRA |= 1<<ADPS2; //see table 85 in datasheet for prescaler selection options
  be:	32 9a       	sbi	0x06, 2	; 6
	//set voltage reference as AVCC, should be 5volts?  see page 208
	//we should maybe change this to a more stable reference?
	ADMUX |= 1<<REFS0;
  c0:	3e 9a       	sbi	0x07, 6	; 7
	//enable ADC interrupt
	ADCSRA |= 1<<ADIE;
  c2:	33 9a       	sbi	0x06, 3	; 6
	//enable the ADC
	ADCSRA |= 1<<ADEN;
  c4:	37 9a       	sbi	0x06, 7	; 6
	//Re-enable Interrupts
	sei();
  c6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3e>
    while(1)
    {
		_delay_us(1);
		if(cnt % 2 == 0)
			OCR1A++;
  d0:	8a b5       	in	r24, 0x2a	; 42
  d2:	9b b5       	in	r25, 0x2b	; 43
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	9b bd       	out	0x2b, r25	; 43
  d8:	8a bd       	out	0x2a, r24	; 42
  da:	f6 cf       	rjmp	.-20     	; 0xc8 <main+0x36>

000000dc <__vector_1>:
}

//This interrupt takes an input from a button and increases the duty
//cycle.
//Params: in
ISR(INT0_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	if(OCR1A <= (ICR1 - 1))
  ee:	2a b5       	in	r18, 0x2a	; 42
  f0:	3b b5       	in	r19, 0x2b	; 43
  f2:	86 b5       	in	r24, 0x26	; 38
  f4:	97 b5       	in	r25, 0x27	; 39
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	82 17       	cp	r24, r18
  fa:	93 07       	cpc	r25, r19
  fc:	28 f0       	brcs	.+10     	; 0x108 <__vector_1+0x2c>

		OCR1A += 0x01;
  fe:	8a b5       	in	r24, 0x2a	; 42
 100:	9b b5       	in	r25, 0x2b	; 43
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	9b bd       	out	0x2b, r25	; 43
 106:	8a bd       	out	0x2a, r24	; 42

}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_2>:

//This interrupt takes an input from a button and decreases the duty
//cycle.
//Params: in
ISR(INT1_vect){  
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	if(OCR1A > 0x01)
 128:	8a b5       	in	r24, 0x2a	; 42
 12a:	9b b5       	in	r25, 0x2b	; 43
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	91 05       	cpc	r25, r1
 130:	28 f0       	brcs	.+10     	; 0x13c <__vector_2+0x22>

		OCR1A -= 0x01;
 132:	8a b5       	in	r24, 0x2a	; 42
 134:	9b b5       	in	r25, 0x2b	; 43
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	9b bd       	out	0x2b, r25	; 43
 13a:	8a bd       	out	0x2a, r24	; 42

}
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_16>:

ISR(ADC_vect) //ADC interrupt vector function
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
	uint8_t theLowADC = ADCL;  //assign the variable theLowADC as the value in the register ADCL
 156:	84 b1       	in	r24, 0x04	; 4
	uint16_t theTenBitResults = ADCH<<8;  //assign the variable theTenBitResults as the value in ADCH shifted 8 left.
 158:	85 b1       	in	r24, 0x05	; 5
	//Display the value on the Display
	ADCSRA |=1<<ADSC;  //start ADC conversion
 15a:	36 9a       	sbi	0x06, 6	; 6
}
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
